import * as Octokit from "@octokit/rest";
declare type PullRequestNumber = number;
/**
 * A Git reference name.
 */
declare type Ref = string;
declare type RepoName = string;
declare type RepoOwner = string;
/**
 * A Git SHA-1.
 */
declare type Sha = string;
declare type CommitMessage = string;
declare type CommitAuthor = Octokit.PullsListCommitsResponseItemCommitAuthor;
declare type CommitCommitter = Octokit.PullsListCommitsResponseItemCommitCommitter;
declare type CommitDetails = {
    author: CommitAuthor;
    committer: CommitCommitter;
    message: CommitMessage;
    sha: Sha;
    tree: Sha;
};
declare const generateUniqueRef: (ref: string) => string;
declare const getHeadRef: (ref: string) => string;
declare const fetchRefSha: ({ octokit, owner, ref, repo, }: {
    octokit: Octokit;
    owner: string;
    ref: string;
    repo: string;
}) => Promise<string>;
declare const updateRef: ({ force, octokit, owner, ref, repo, sha, }: {
    force: boolean;
    octokit: Octokit;
    owner: string;
    ref: string;
    repo: string;
    sha: string;
}) => Promise<void>;
declare const deleteRef: ({ octokit, owner, ref, repo, }: {
    octokit: Octokit;
    owner: string;
    ref: string;
    repo: string;
}) => Promise<void>;
declare const createRef: ({ octokit, owner, ref, repo, sha, }: {
    octokit: Octokit;
    owner: string;
    ref: string;
    repo: string;
    sha: string;
}) => Promise<void>;
declare const createTemporaryRef: ({ octokit, owner, ref, repo, sha, }: {
    octokit: Octokit;
    owner: string;
    ref: string;
    repo: string;
    sha: string;
}) => Promise<{
    deleteTemporaryRef: () => Promise<void>;
    temporaryRef: string;
}>;
declare const withTemporaryRef: <T>({ action, octokit, owner, ref, repo, sha, }: {
    action: (ref: string) => Promise<T>;
    octokit: Octokit;
    owner: string;
    ref: string;
    repo: string;
    sha: string;
}) => Promise<T>;
declare const fetchCommitsDetails: ({ octokit, owner, pullRequestNumber, repo, }: {
    octokit: Octokit;
    owner: string;
    pullRequestNumber: number;
    repo: string;
}) => Promise<CommitDetails[]>;
declare const fetchCommits: ({ octokit, owner, pullRequestNumber, repo, }: {
    octokit: Octokit;
    owner: string;
    pullRequestNumber: number;
    repo: string;
}) => Promise<string[]>;
export { CommitAuthor, CommitCommitter, CommitMessage, CommitDetails, PullRequestNumber, Ref, RepoName, RepoOwner, Sha, createRef, createTemporaryRef, deleteRef, fetchCommits, fetchCommitsDetails, fetchRefSha, generateUniqueRef, getHeadRef, updateRef, withTemporaryRef, };
