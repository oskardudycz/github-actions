import * as Octokit from "@octokit/rest";
import { CommitMessage, Ref, Sha } from "../git";
declare type CommitLines = string[];
declare type Commit = {
    lines: CommitLines;
    message: CommitMessage;
};
declare type RefState = Commit[];
declare type RepoState = {
    initialCommit: Commit;
    refsCommits: {
        [ref: string]: RefState;
    };
};
declare type CommandDirectory = string;
declare type CommandEnv = {
    [key: string]: string;
};
declare type DeleteRefs = () => Promise<void>;
declare type RefsDetails = {
    [ref: string]: {
        ref: Ref;
        shas: Sha[];
    };
};
declare const createCommitFromLinesAndMessage: ({ commit: { lines, message }, octokit, owner, parent, repo, }: {
    commit: Commit;
    octokit: Octokit;
    owner: string;
    parent?: string | undefined;
    repo: string;
}) => Promise<string>;
declare const createPullRequest: ({ base, head, octokit, owner, repo, }: {
    base: string;
    head: string;
    octokit: Octokit;
    owner: string;
    repo: string;
}) => Promise<number>;
declare const fetchRefCommitsFromSha: ({ octokit, owner, repo, sha, }: {
    octokit: Octokit;
    owner: string;
    repo: string;
    sha: string;
}) => Promise<Commit[]>;
declare const fetchRefCommits: ({ octokit, owner, ref, repo, }: {
    octokit: Octokit;
    owner: string;
    ref: string;
    repo: string;
}) => Promise<Commit[]>;
declare const createRefs: ({ octokit, owner, repo, state: { initialCommit, refsCommits }, }: {
    octokit: Octokit;
    owner: string;
    repo: string;
    state: RepoState;
}) => Promise<{
    deleteRefs: DeleteRefs;
    refsDetails: RefsDetails;
}>;
declare const executeGitCommand: ({ args, directory, env, ref, }: {
    args: string[];
    directory: string;
    env?: CommandEnv | undefined;
    ref: string;
}) => Promise<string>;
declare const createGitRepo: ({ initialCommit, refsCommits }: RepoState) => Promise<string>;
declare const getRefShasFromGitRepo: ({ directory, ref, }: {
    directory: string;
    ref: string;
}) => Promise<string[]>;
declare const getRefCommitsFromGitRepo: ({ directory, ref, }: {
    directory: string;
    ref: string;
}) => Promise<Commit[]>;
export { CommandDirectory, createCommitFromLinesAndMessage, createGitRepo, createPullRequest, createRefs, DeleteRefs, executeGitCommand, fetchRefCommits, fetchRefCommitsFromSha, getRefCommitsFromGitRepo, getRefShasFromGitRepo, RefsDetails, RepoState, };
